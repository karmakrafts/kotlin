/*
 * Copyright 2010-2024 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.fir.dataframe;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.util.KtTestUtil;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.GenerateTestsKt}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("plugins/kotlin-dataframe/testData/box")
@TestDataPath("$PROJECT_ROOT")
public class DataFrameBlackBoxCodegenTestGenerated extends AbstractDataFrameBlackBoxCodegenTest {
  @Test
  @TestMetadata("addDsl.kt")
  public void testAddDsl() {
    runTest("plugins/kotlin-dataframe/testData/box/addDsl.kt");
  }

  @Test
  @TestMetadata("addId.kt")
  public void testAddId() {
    runTest("plugins/kotlin-dataframe/testData/box/addId.kt");
  }

  @Test
  public void testAllFilesPresentInBox() {
    KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlin-dataframe/testData/box"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
  }

  @Test
  @TestMetadata("castTo.kt")
  public void testCastTo() {
    runTest("plugins/kotlin-dataframe/testData/box/castTo.kt");
  }

  @Test
  @TestMetadata("castTo_function.kt")
  public void testCastTo_function() {
    runTest("plugins/kotlin-dataframe/testData/box/castTo_function.kt");
  }

  @Test
  @TestMetadata("columnGroupApi.kt")
  public void testColumnGroupApi() {
    runTest("plugins/kotlin-dataframe/testData/box/columnGroupApi.kt");
  }

  @Test
  @TestMetadata("columnName.kt")
  public void testColumnName() {
    runTest("plugins/kotlin-dataframe/testData/box/columnName.kt");
  }

  @Test
  @TestMetadata("columnName_invalidSymbol.kt")
  public void testColumnName_invalidSymbol() {
    runTest("plugins/kotlin-dataframe/testData/box/columnName_invalidSymbol.kt");
  }

  @Test
  @TestMetadata("columnWithStarProjection.kt")
  public void testColumnWithStarProjection() {
    runTest("plugins/kotlin-dataframe/testData/box/columnWithStarProjection.kt");
  }

  @Test
  @TestMetadata("conflictingJvmDeclarations.kt")
  public void testConflictingJvmDeclarations() {
    runTest("plugins/kotlin-dataframe/testData/box/conflictingJvmDeclarations.kt");
  }

  @Test
  @TestMetadata("convertToDataFrame.kt")
  public void testConvertToDataFrame() {
    runTest("plugins/kotlin-dataframe/testData/box/convertToDataFrame.kt");
  }

  @Test
  @TestMetadata("convert_to.kt")
  public void testConvert_to() {
    runTest("plugins/kotlin-dataframe/testData/box/convert_to.kt");
  }

  @Test
  @TestMetadata("dataFrameOf.kt")
  public void testDataFrameOf() {
    runTest("plugins/kotlin-dataframe/testData/box/dataFrameOf.kt");
  }

  @Test
  @TestMetadata("dataFrameOf_to.kt")
  public void testDataFrameOf_to() {
    runTest("plugins/kotlin-dataframe/testData/box/dataFrameOf_to.kt");
  }

  @Test
  @TestMetadata("dataFrameOf_vararg.kt")
  public void testDataFrameOf_vararg() {
    runTest("plugins/kotlin-dataframe/testData/box/dataFrameOf_vararg.kt");
  }

  @Test
  @TestMetadata("dataRowSchemaApi.kt")
  public void testDataRowSchemaApi() {
    runTest("plugins/kotlin-dataframe/testData/box/dataRowSchemaApi.kt");
  }

  @Test
  @TestMetadata("dataSchemaCodegen.kt")
  public void testDataSchemaCodegen() {
    runTest("plugins/kotlin-dataframe/testData/box/dataSchemaCodegen.kt");
  }

  @Test
  @TestMetadata("dfIde.kt")
  public void testDfIde() {
    runTest("plugins/kotlin-dataframe/testData/box/dfIde.kt");
  }

  @Test
  @TestMetadata("diff.kt")
  public void testDiff() {
    runTest("plugins/kotlin-dataframe/testData/box/diff.kt");
  }

  @Test
  @TestMetadata("dropNA.kt")
  public void testDropNA() {
    runTest("plugins/kotlin-dataframe/testData/box/dropNA.kt");
  }

  @Test
  @TestMetadata("dropNulls.kt")
  public void testDropNulls() {
    runTest("plugins/kotlin-dataframe/testData/box/dropNulls.kt");
  }

  @Test
  @TestMetadata("duplicatedSignature.kt")
  public void testDuplicatedSignature() {
    runTest("plugins/kotlin-dataframe/testData/box/duplicatedSignature.kt");
  }

  @Test
  @TestMetadata("duplicatedSignature1.kt")
  public void testDuplicatedSignature1() {
    runTest("plugins/kotlin-dataframe/testData/box/duplicatedSignature1.kt");
  }

  @Test
  @TestMetadata("explode.kt")
  public void testExplode() {
    runTest("plugins/kotlin-dataframe/testData/box/explode.kt");
  }

  @Test
  @TestMetadata("explodeDataFrame.kt")
  public void testExplodeDataFrame() {
    runTest("plugins/kotlin-dataframe/testData/box/explodeDataFrame.kt");
  }

  @Test
  @TestMetadata("extractDataSchemaWithStarProjection.kt")
  public void testExtractDataSchemaWithStarProjection() {
    runTest("plugins/kotlin-dataframe/testData/box/extractDataSchemaWithStarProjection.kt");
  }

  @Test
  @TestMetadata("extractDataSchemaWithTypeParameter.kt")
  public void testExtractDataSchemaWithTypeParameter() {
    runTest("plugins/kotlin-dataframe/testData/box/extractDataSchemaWithTypeParameter.kt");
  }

  @Test
  @TestMetadata("extractPluginSchemaWithUnfold.kt")
  public void testExtractPluginSchemaWithUnfold() {
    runTest("plugins/kotlin-dataframe/testData/box/extractPluginSchemaWithUnfold.kt");
  }

  @Test
  @TestMetadata("fillNulls.kt")
  public void testFillNulls() {
    runTest("plugins/kotlin-dataframe/testData/box/fillNulls.kt");
  }

  @Test
  @TestMetadata("flatten.kt")
  public void testFlatten() {
    runTest("plugins/kotlin-dataframe/testData/box/flatten.kt");
  }

  @Test
  @TestMetadata("flexibleReturnType.kt")
  public void testFlexibleReturnType() {
    runTest("plugins/kotlin-dataframe/testData/box/flexibleReturnType.kt");
  }

  @Test
  @TestMetadata("group.kt")
  public void testGroup() {
    runTest("plugins/kotlin-dataframe/testData/box/group.kt");
  }

  @Test
  @TestMetadata("groupBy.kt")
  public void testGroupBy() {
    runTest("plugins/kotlin-dataframe/testData/box/groupBy.kt");
  }

  @Test
  @TestMetadata("groupByAdd.kt")
  public void testGroupByAdd() {
    runTest("plugins/kotlin-dataframe/testData/box/groupByAdd.kt");
  }

  @Test
  @TestMetadata("groupBy_DataRow.kt")
  public void testGroupBy_DataRow() {
    runTest("plugins/kotlin-dataframe/testData/box/groupBy_DataRow.kt");
  }

  @Test
  @TestMetadata("groupBy_count.kt")
  public void testGroupBy_count() {
    runTest("plugins/kotlin-dataframe/testData/box/groupBy_count.kt");
  }

  @Test
  @TestMetadata("groupBy_extractSchema.kt")
  public void testGroupBy_extractSchema() {
    runTest("plugins/kotlin-dataframe/testData/box/groupBy_extractSchema.kt");
  }

  @Test
  @TestMetadata("groupBy_maxOfMinOf.kt")
  public void testGroupBy_maxOfMinOf() {
    runTest("plugins/kotlin-dataframe/testData/box/groupBy_maxOfMinOf.kt");
  }

  @Test
  @TestMetadata("groupBy_refine.kt")
  public void testGroupBy_refine() {
    runTest("plugins/kotlin-dataframe/testData/box/groupBy_refine.kt");
  }

  @Test
  @TestMetadata("groupBy_toDataFrame.kt")
  public void testGroupBy_toDataFrame() {
    runTest("plugins/kotlin-dataframe/testData/box/groupBy_toDataFrame.kt");
  }

  @Test
  @TestMetadata("infer.kt")
  public void testInfer() {
    runTest("plugins/kotlin-dataframe/testData/box/infer.kt");
  }

  @Test
  @TestMetadata("injectAccessors.kt")
  public void testInjectAccessors() {
    runTest("plugins/kotlin-dataframe/testData/box/injectAccessors.kt");
  }

  @Test
  @TestMetadata("injectAccessorsDsl.kt")
  public void testInjectAccessorsDsl() {
    runTest("plugins/kotlin-dataframe/testData/box/injectAccessorsDsl.kt");
  }

  @Test
  @TestMetadata("insert.kt")
  public void testInsert() {
    runTest("plugins/kotlin-dataframe/testData/box/insert.kt");
  }

  @Test
  @TestMetadata("inventNamesForLocalClasses.kt")
  public void testInventNamesForLocalClasses() {
    runTest("plugins/kotlin-dataframe/testData/box/inventNamesForLocalClasses.kt");
  }

  @Test
  @TestMetadata("join.kt")
  public void testJoin() {
    runTest("plugins/kotlin-dataframe/testData/box/join.kt");
  }

  @Test
  @TestMetadata("join_1.kt")
  public void testJoin_1() {
    runTest("plugins/kotlin-dataframe/testData/box/join_1.kt");
  }

  @Test
  @TestMetadata("localTypeExposure.kt")
  public void testLocalTypeExposure() {
    runTest("plugins/kotlin-dataframe/testData/box/localTypeExposure.kt");
  }

  @Test
  @TestMetadata("lowerGeneratedImplicitReceiver.kt")
  public void testLowerGeneratedImplicitReceiver() {
    runTest("plugins/kotlin-dataframe/testData/box/lowerGeneratedImplicitReceiver.kt");
  }

  @Test
  @TestMetadata("mapToFrame.kt")
  public void testMapToFrame() {
    runTest("plugins/kotlin-dataframe/testData/box/mapToFrame.kt");
  }

  @Test
  @TestMetadata("merge.kt")
  public void testMerge() {
    runTest("plugins/kotlin-dataframe/testData/box/merge.kt");
  }

  @Test
  @TestMetadata("modifySchemaInAggregate.kt")
  public void testModifySchemaInAggregate() {
    runTest("plugins/kotlin-dataframe/testData/box/modifySchemaInAggregate.kt");
  }

  @Test
  @TestMetadata("moveAfter.kt")
  public void testMoveAfter() {
    runTest("plugins/kotlin-dataframe/testData/box/moveAfter.kt");
  }

  @Test
  @TestMetadata("moveInto.kt")
  public void testMoveInto() {
    runTest("plugins/kotlin-dataframe/testData/box/moveInto.kt");
  }

  @Test
  @TestMetadata("moveToEnd.kt")
  public void testMoveToEnd() {
    runTest("plugins/kotlin-dataframe/testData/box/moveToEnd.kt");
  }

  @Test
  @TestMetadata("moveToStart.kt")
  public void testMoveToStart() {
    runTest("plugins/kotlin-dataframe/testData/box/moveToStart.kt");
  }

  @Test
  @TestMetadata("moveToTop.kt")
  public void testMoveToTop() {
    runTest("plugins/kotlin-dataframe/testData/box/moveToTop.kt");
  }

  @Test
  @TestMetadata("moveUnder.kt")
  public void testMoveUnder() {
    runTest("plugins/kotlin-dataframe/testData/box/moveUnder.kt");
  }

  @Test
  @TestMetadata("nestedDataSchemaCodegen.kt")
  public void testNestedDataSchemaCodegen() {
    runTest("plugins/kotlin-dataframe/testData/box/nestedDataSchemaCodegen.kt");
  }

  @Test
  @TestMetadata("OuterClass.kt")
  public void testOuterClass() {
    runTest("plugins/kotlin-dataframe/testData/box/OuterClass.kt");
  }

  @Test
  @TestMetadata("parametrizedDataFrame.kt")
  public void testParametrizedDataFrame() {
    runTest("plugins/kotlin-dataframe/testData/box/parametrizedDataFrame.kt");
  }

  @Test
  @TestMetadata("perRowCol.kt")
  public void testPerRowCol() {
    runTest("plugins/kotlin-dataframe/testData/box/perRowCol.kt");
  }

  @Test
  @TestMetadata("platformType.kt")
  public void testPlatformType() {
    runTest("plugins/kotlin-dataframe/testData/box/platformType.kt");
  }

  @Test
  @TestMetadata("playground.kt")
  public void testPlayground() {
    runTest("plugins/kotlin-dataframe/testData/box/playground.kt");
  }

  @Test
  @TestMetadata("propertiesOrder.kt")
  public void testPropertiesOrder() {
    runTest("plugins/kotlin-dataframe/testData/box/propertiesOrder.kt");
  }

  @Test
  @TestMetadata("reducedGroupBy.kt")
  public void testReducedGroupBy() {
    runTest("plugins/kotlin-dataframe/testData/box/reducedGroupBy.kt");
  }

  @Test
  @TestMetadata("remove.kt")
  public void testRemove() {
    runTest("plugins/kotlin-dataframe/testData/box/remove.kt");
  }

  @Test
  @TestMetadata("rename.kt")
  public void testRename() {
    runTest("plugins/kotlin-dataframe/testData/box/rename.kt");
  }

  @Test
  @TestMetadata("renameMapping.kt")
  public void testRenameMapping() {
    runTest("plugins/kotlin-dataframe/testData/box/renameMapping.kt");
  }

  @Test
  @TestMetadata("renameToCamelCase.kt")
  public void testRenameToCamelCase() {
    runTest("plugins/kotlin-dataframe/testData/box/renameToCamelCase.kt");
  }

  @Test
  @TestMetadata("reorder.kt")
  public void testReorder() {
    runTest("plugins/kotlin-dataframe/testData/box/reorder.kt");
  }

  @Test
  @TestMetadata("reorderRange.kt")
  public void testReorderRange() {
    runTest("plugins/kotlin-dataframe/testData/box/reorderRange.kt");
  }

  @Test
  @TestMetadata("Schema.kt")
  public void testSchema() {
    runTest("plugins/kotlin-dataframe/testData/box/Schema.kt");
  }

  @Test
  @TestMetadata("schemaFromImplicitReceiver.kt")
  public void testSchemaFromImplicitReceiver() {
    runTest("plugins/kotlin-dataframe/testData/box/schemaFromImplicitReceiver.kt");
  }

  @Test
  @TestMetadata("select.kt")
  public void testSelect() {
    runTest("plugins/kotlin-dataframe/testData/box/select.kt");
  }

  @Test
  @TestMetadata("selectColsOf.kt")
  public void testSelectColsOf() {
    runTest("plugins/kotlin-dataframe/testData/box/selectColsOf.kt");
  }

  @Test
  @TestMetadata("selectIt.kt")
  public void testSelectIt() {
    runTest("plugins/kotlin-dataframe/testData/box/selectIt.kt");
  }

  @Test
  @TestMetadata("selectThis.kt")
  public void testSelectThis() {
    runTest("plugins/kotlin-dataframe/testData/box/selectThis.kt");
  }

  @Test
  @TestMetadata("selectionDsl.kt")
  public void testSelectionDsl() {
    runTest("plugins/kotlin-dataframe/testData/box/selectionDsl.kt");
  }

  @Test
  @TestMetadata("toDataFrame.kt")
  public void testToDataFrame() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame.kt");
  }

  @Test
  @TestMetadata("toDataFrame_column.kt")
  public void testToDataFrame_column() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_column.kt");
  }

  @Test
  @TestMetadata("toDataFrame_customIterable.kt")
  public void testToDataFrame_customIterable() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_customIterable.kt");
  }

  @Test
  @TestMetadata("toDataFrame_dataSchema.kt")
  public void testToDataFrame_dataSchema() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_dataSchema.kt");
  }

  @Test
  @TestMetadata("toDataFrame_dsl.kt")
  public void testToDataFrame_dsl() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_dsl.kt");
  }

  @Test
  @TestMetadata("toDataFrame_from.kt")
  public void testToDataFrame_from() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_from.kt");
  }

  @Test
  @TestMetadata("toDataFrame_local_class.kt")
  public void testToDataFrame_local_class() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_local_class.kt");
  }

  @Test
  @TestMetadata("toDataFrame_nested.kt")
  public void testToDataFrame_nested() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_nested.kt");
  }

  @Test
  @TestMetadata("toDataFrame_nullableList.kt")
  public void testToDataFrame_nullableList() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_nullableList.kt");
  }

  @Test
  @TestMetadata("toDataFrame_nullableListSubtree.kt")
  public void testToDataFrame_nullableListSubtree() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_nullableListSubtree.kt");
  }

  @Test
  @TestMetadata("toDataFrame_nullableSubtree.kt")
  public void testToDataFrame_nullableSubtree() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_nullableSubtree.kt");
  }

  @Test
  @TestMetadata("toDataFrame_private_class.kt")
  public void testToDataFrame_private_class() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_private_class.kt");
  }

  @Test
  @TestMetadata("toDataFrame_private_properties.kt")
  public void testToDataFrame_private_properties() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_private_properties.kt");
  }

  @Test
  @TestMetadata("toDataFrame_superType.kt")
  public void testToDataFrame_superType() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_superType.kt");
  }

  @Test
  @TestMetadata("toDataFrame_typeParameters.kt")
  public void testToDataFrame_typeParameters() {
    runTest("plugins/kotlin-dataframe/testData/box/toDataFrame_typeParameters.kt");
  }

  @Test
  @TestMetadata("transformReplaceFunctionCall.kt")
  public void testTransformReplaceFunctionCall() {
    runTest("plugins/kotlin-dataframe/testData/box/transformReplaceFunctionCall.kt");
  }

  @Test
  @TestMetadata("ungroup.kt")
  public void testUngroup() {
    runTest("plugins/kotlin-dataframe/testData/box/ungroup.kt");
  }

  @Test
  @TestMetadata("update.kt")
  public void testUpdate() {
    runTest("plugins/kotlin-dataframe/testData/box/update.kt");
  }

  @Test
  @TestMetadata("valueCounts.kt")
  public void testValueCounts() {
    runTest("plugins/kotlin-dataframe/testData/box/valueCounts.kt");
  }

  @Test
  @TestMetadata("wrongReceiver.kt")
  public void testWrongReceiver() {
    runTest("plugins/kotlin-dataframe/testData/box/wrongReceiver.kt");
  }

  @Test
  @TestMetadata("xs.kt")
  public void testXs() {
    runTest("plugins/kotlin-dataframe/testData/box/xs.kt");
  }

  @Nested
  @TestMetadata("plugins/kotlin-dataframe/testData/box/colKinds")
  @TestDataPath("$PROJECT_ROOT")
  public class ColKinds {
    @Test
    @TestMetadata("add.kt")
    public void testAdd() {
      runTest("plugins/kotlin-dataframe/testData/box/colKinds/add.kt");
    }

    @Test
    public void testAllFilesPresentInColKinds() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlin-dataframe/testData/box/colKinds"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("toDataFrame.kt")
    public void testToDataFrame() {
      runTest("plugins/kotlin-dataframe/testData/box/colKinds/toDataFrame.kt");
    }
  }

  @Nested
  @TestMetadata("plugins/kotlin-dataframe/testData/box/csDsl")
  @TestDataPath("$PROJECT_ROOT")
  public class CsDsl {
    @Test
    @TestMetadata("all.kt")
    public void testAll() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/all.kt");
    }

    @Test
    public void testAllFilesPresentInCsDsl() {
      KtTestUtil.assertAllTestsPresentByMetadataWithExcluded(this.getClass(), new File("plugins/kotlin-dataframe/testData/box/csDsl"), Pattern.compile("^(.+)\\.kt$"), null, TargetBackend.JVM_IR, true);
    }

    @Test
    @TestMetadata("colGroups.kt")
    public void testColGroups() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/colGroups.kt");
    }

    @Test
    @TestMetadata("cols.kt")
    public void testCols() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/cols.kt");
    }

    @Test
    @TestMetadata("colsAtAnyDepth.kt")
    public void testColsAtAnyDepth() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/colsAtAnyDepth.kt");
    }

    @Test
    @TestMetadata("colsOf.kt")
    public void testColsOf() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/colsOf.kt");
    }

    @Test
    @TestMetadata("columnNameFIlters.kt")
    public void testColumnNameFIlters() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/columnNameFIlters.kt");
    }

    @Test
    @TestMetadata("columnRange.kt")
    public void testColumnRange() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/columnRange.kt");
    }

    @Test
    @TestMetadata("drop.kt")
    public void testDrop() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/drop.kt");
    }

    @Test
    @TestMetadata("first.kt")
    public void testFirst() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/first.kt");
    }

    @Test
    @TestMetadata("frameCols.kt")
    public void testFrameCols() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/frameCols.kt");
    }

    @Test
    @TestMetadata("last.kt")
    public void testLast() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/last.kt");
    }

    @Test
    @TestMetadata("rename.kt")
    public void testRename() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/rename.kt");
    }

    @Test
    @TestMetadata("single.kt")
    public void testSingle() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/single.kt");
    }

    @Test
    @TestMetadata("take.kt")
    public void testTake() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/take.kt");
    }

    @Test
    @TestMetadata("valueCols.kt")
    public void testValueCols() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/valueCols.kt");
    }

    @Test
    @TestMetadata("withoutNulls.kt")
    public void testWithoutNulls() {
      runTest("plugins/kotlin-dataframe/testData/box/csDsl/withoutNulls.kt");
    }
  }
}
